# OpenRemote v3
#
# By default running this profile installs the stack in swarm on https://localhost using a
# self-signed SSL certificate, with username 'admin' and password 'secret'.
#
# Install Docker Community edition (https://docker.com/) on Windows, macOS, or Linux.
#
# Start a demo stack in the project root directory with:
#
#   dosker swarm init
#   docker pull openremote/deployment
#   docker-compose -p demo up -d --no-build deployment 
#   docker stack deploy --compose-file docker-compose-swarm.yml demo
#
# Stop the stack:
#
#   docker stack rm demo
#
# For full documentation, see profile/deploy.yml
#
# For swarm (production) use version 3, for developement use version 2 
version: '3.7'

# If you enable volume mappings in services, you need this. Otherwise, remove the volumes
volumes:
  proxy-data:
  postgresql-data:

services:

  proxy:

    image: openremote/proxy:${DATE_TAG:-latest}
    environment:
      TZ: Europe/Amsterdam
      DOMAINNAME: ${DOMAINNAME:-localhost}
      LE_EMAIL: ${LE_EMAIL:-me@privacy.net}

      # Enable --staging will manage fake certificates, so avoid hitting the rate limits of Let's Encrypt
      # when testing (this is important, you are limited to 5 duplicate certificates per week!)
      # LE_EXTRA_ARGS: '--staging --logs-dir=/etc/letsencrypt'

      # The proxy supports up to 10 custom redirects from hostname to any path on the
      # backend service. This can be used to give consoles a vanity domain name.
      # PROXY_HOST_REDIRECT_1_NAME: www.my-console-master.tld
      # PROXY_HOST_REDIRECT_1_TARGET: /console/master
      # PROXY_HOST_REDIRECT_2_NAME: www.my-console-tenant-a.tld
      # PROXY_HOST_REDIRECT_2_TARGET: /console/building
      # PROXY_HOST_REDIRECT_3_NAME: ...

      # Customize proxy log, defaults to 'notice', requests are logged at 'info'.
      # Available levels are: emerg, alert, crit, err, warning, notice, info, debug
      # PROXY_LOGLEVEL: 'notice'

    # Run proxy, obtain and automatically renew SSL certificates if DOMAINNAME is not localhost. Use
    # the command 'help' to get a list of all options.
    command: run

    # Expose a public web service mapped to ports on the host.
    ports:
      - "80:80"
      - "443:443"

    volumes:
      - proxy-data:/deployment
      # Override the haproxy.cfg with custom file
      # -${MY_PROXY_CONFIG_FILE}:/etc/haproxy/haproxy.cfg

    deploy:
      replicas: 1

  # This configuration uses the manager's deployment-specific data such as map tiles,
  # console application static resources (HTML, JS, CSS), extensions, and other
  # configuration files which were baked into the managers image.
  manager:

    image: openremote/manager-swarm:${DATE_TAG:-latest}
    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Amsterdam

      # If developer mode is enabled, all setup tasks will be executed on application startup.
      # This will clean all data in the database, and then import demo/test data. Some caching and
      # other runtime performance-optimizations will also be disabled.
      DEV_MODE: ${DEV_MODE:-false}

      # This switch can wipe your database, this is the factory reset!
      SETUP_WIPE_CLEAN_INSTALL: ${SETUP_WIPE_CLEAN_INSTALL:-true}
      SETUP_ADMIN_PASSWORD: ${SETUP_ADMIN_PASSWORD:-secret}

      # When you are ready to permanently install your project, replace it with the next lines...
      # SETUP_WIPE_CLEAN_INSTALL: # Allow override on CLI

      # Configure SMTP smart host, to send password reset emails etc.
      #SETUP_EMAIL_HOST: smtp-host.demo.tld
      #SETUP_EMAIL_USER: 'smtp-user'
      #SETUP_EMAIL_PASSWORD: 'smtp-password'
      #SETUP_EMAIL_PORT: 25
      #SETUP_EMAIL_TLS: 'true'
      #SETUP_EMAIL_FROM_KEYCLOAK: 'no-reply@openremote.io'
      #SETUP_EMAIL_FROM_DEFAULT: 'no-reply@openremote.io'

      # The public URL of the proxy in front of this manager; must match the proxy#DOMAINNAME (unfortunately
      # docker compose doesn't support chaining environment variables at time of writing, hence the need for
      # two environment variables)
      EXTERNAL_URL: ${EXTERNAL_URL:-https://localhost}

      # The service-internal host name and port of the identity provider.
      KEYCLOAK_HOST: keycloak
      KEYCLOAK_PORT: 8080

      JAVA_OPTS: -Xms400m -Xmx400m
                  -XX:CompressedClassSpaceSize=25m -XX:MaxMetaspaceSize=150m
                  -XX:InitialCodeCacheSize=50m -XX:ReservedCodeCacheSize=50m
                  -XX:MaxDirectMemorySize=25m
                  -XX:NativeMemoryTracking=summary
                  -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/javadump.core.hprof

    deploy:
      replicas: 1

  keycloak:

    # Image will be pulled when using the `docker-compose pull` command or `docker-compose up --no-build`
    image: openremote/keycloak:${DATE_TAG:-latest}
      
    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Amsterdam

      # Switch to DEBUG to diagnose Keycloak problems.
      KEYCLOAK_LOGLEVEL: INFO

      # When you are ready to permanently install your project, replace it with the next line ...
      # SETUP_ADMIN_PASSWORD: # Allow override on CLI

      # Configure how Keycloak connects to the database
      DB_VENDOR: postgres
      DB_ADDR: postgresql
      DB_PORT: 5432
      DB_DATABASE: openremote
      DB_USER: openremote
      DB_SCHEMA: public
      DB_PASSWORD: CHANGE_ME_DB_USER_PASSWORD
      KEYCLOAK_USER: admin
      PROXY_ADDRESS_FORWARDING: 'true'
      KEYCLOAK_FRONTEND_URL: ${EXTERNAL_URL:-https://localhost}/auth

      # CHANGE THIS PASSWORD BEFORE STARTING THE STACK! THIS IS ONLY FOR DEMO!
      KEYCLOAK_PASSWORD: ${SETUP_ADMIN_PASSWORD:-secret}

      # Custom JVM options (increase heap size if required)
      JAVA_OPTS: -Xms300m -Xmx300m
                  -XX:CompressedClassSpaceSize=25m -XX:MaxMetaspaceSize=200m
                  -XX:InitialCodeCacheSize=50m -XX:ReservedCodeCacheSize=50m
                  -XX:MaxDirectMemorySize=25m
                  -XX:NativeMemoryTracking=summary
                  -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/javadump.core.hprof
                  -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jboss.byteman -Djava.awt.headless=true

    ports:
      - "8081:8080"

    deploy:
      replicas: 1
 
  # This configuration stores postgresql data in a Docker volume. You manage this volume
  # independently from your stack with with 'docker volume ls', 'docker volume rm', etc.
  # Alternatively, you can store postgresql data in a directory on your host.
  postgresql:
    # Image will be pulled when using the `docker-compose pull` command or `docker-compose up --no-build`
    image: openremote/postgresql:${DATE_TAG:-latest}
      
    environment:

      # It is important that all services have the same timezone and are time synchronized.
      # Bearer tokens are only valid for minutes, and authentication fails if Keycloak drifts.
      TZ: Europe/Amsterdam

      # You can open an SQL console on a running container with:
      # docker exec -it <container ID> psql -U openremote

    volumes:
      - postgresql-data:/var/lib/postgresql/data

    deploy:
      replicas: 1

