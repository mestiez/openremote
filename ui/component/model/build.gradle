import com.fasterxml.jackson.annotation.JsonAutoDetect
import cz.habarta.typescript.generator.Jackson2Configuration

apply plugin: "groovy"
apply plugin: "cz.habarta.typescript-generator"

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "cz.habarta.typescript-generator:typescript-generator-gradle-plugin:$typescriptGeneratorVersion"
    }
}

dependencies {
    if (isCustomProject()) {
        def customModel = findProject(":model")
        if (customModel != null) {
            compile customModel
        }
    }
    compile resolveProject(":model")
    compile resolveProject(":agent")
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion"
    compile "com.fasterxml.jackson.module:jackson-module-parameter-names:$jacksonVersion"
    compile "cz.habarta.typescript-generator:typescript-generator-core:$typescriptGeneratorVersion"
}

generateTypeScript {
    jsonLibrary = "jackson2"
    classPatterns = [
            "org.openremote.model.**"
    ]
    excludeClassPatterns = [
        "org.openremote.model.event.shared.*Filter**",
        "org.openremote.model.util.**",
        "org.openremote.model.flow.**",
        "java.io.Serializable",
        "java.lang.Comparable"
    ]
    customTypeProcessor = "CustomTypeProcessor"
    customTypeNamingFunction = "function(name, simpleName) { if (name.indexOf(\"\$\") > 0) return name.substr(name.lastIndexOf(\".\")+1).replace(\"\$\",\"\"); }"
    customTypeMappings = [
        "com.fasterxml.jackson.databind.node.ObjectNode:{ [id: string]: any }",
        "java.lang.Class<T>:string",
        "org.openremote.model.attribute.MetaItem<T>:any"
    ]
    optionalProperties = "all" // TODO: cleanup model to be more explicit about optional params
    mapEnum = cz.habarta.typescript.generator.EnumMapping.asEnum
    mapDate = cz.habarta.typescript.generator.DateMapping.asNumber
    outputFile = "src/index.ts"
    outputFileType = "implementationFile"
    outputKind = "module"
    jackson2Configuration = [
        fieldVisibility: "ANY",
        creatorVisibility: "ANY",
        getterVisibility: "NONE",
        isGetterVisibility: "NONE",
        setterVisibility: "NONE"
    ]
    jackson2Modules = [
        "com.fasterxml.jackson.datatype.jdk8.Jdk8Module",
        "com.fasterxml.jackson.datatype.jsr310.JavaTimeModule",
        "com.fasterxml.jackson.module.paramnames.ParameterNamesModule"
    ]
    extensions = [
        "AssetModelInfoExtension",
        "CustomExtension",
        "JsonSerializeExtension"
    ]
}

build.dependsOn generateTypeScript, npmBuild
npmBuild.dependsOn generateTypeScript

clean {
    doLast {
        def dir = new File("${projectDir}/dist")
        dir.deleteDir()
    }
}

task prepareUi() {
    dependsOn clean, npmPrepare
}

task publishUi() {
    dependsOn clean, npmPublish
}
